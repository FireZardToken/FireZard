/**
 * Interface for Random Number Generator
 */

pragma solidity ^0.8.0;

interface IRNG {

    /**
     * @notice Commit a hidden entropy generated by a client.
     *
     * @param commitment Commitment for the client's entropy. For instrance, this can be hash of the entropy.
    **/
    function commit(bytes32 commitment) external;

    /**
     * @notice Lock client's entropy. Mix client's entropy with the entropy of a block that was mined before 
     * the method call, but after the block with the client's entropy commitment. 
     *
     * Note, that no miner knows client's entropy when it is commited to the blockchain and cannot manipulate the
     * hash of the block where client's entropy is mixed with the blockchain entropy, since client's entropy is actually revealed
     * after the lock block is mined. On the other hand, the client cannot predict the blockchain entropy either, when the 
     * client's and blockchain's entropies get mixed.
     *
     * @param entropy Client's entropy
    **/
    function lock(bytes32 entropy) external;

    /**
     * @notice Read the (pseudo-)random number derived from the client's and blockchain entropies. The number is uniquely defined by
     * the client's entropy commitment.
     *
     * @param commitment The commitment identifying the resulting randomly generated number
    **/
    function read(bytes32 commitment) external view returns (uint256);
}
