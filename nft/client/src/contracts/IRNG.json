{
  "contractName": "IRNG",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        }
      ],
      "name": "commit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "entropy",
          "type": "bytes32"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        }
      ],
      "name": "read",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"entropy\",\"type\":\"bytes32\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"read\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"commit(bytes32)\":{\"params\":{\"commitment\":\"Commitment for the client's entropy. For instrance, this can be hash of the entropy.*\"}},\"lock(bytes32)\":{\"params\":{\"entropy\":\"Client's entropy*\"}},\"read(bytes32)\":{\"params\":{\"commitment\":\"The commitment identifying the resulting randomly generated number*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"commit(bytes32)\":{\"notice\":\"Commit a hidden entropy generated by a client.\"},\"lock(bytes32)\":{\"notice\":\"Lock client's entropy. Mix client's entropy with the entropy of a block that was mined before  the method call, but after the block with the client's entropy commitment.  Note, that no miner knows client's entropy when it is commited to the blockchain and cannot manipulate the hash of the block where client's entropy is mixed with the blockchain entropy, since client's entropy is actually revealed after the lock block is mined. On the other hand, the client cannot predict the blockchain entropy either, when the  client's and blockchain's entropies get mixed.\"},\"read(bytes32)\":{\"notice\":\"Read the (pseudo-)random number derived from the client's and blockchain entropies. The number is uniquely defined by the client's entropy commitment.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/IRNG.sol\":\"IRNG\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/IRNG.sol\":{\"keccak256\":\"0xce60d91b198547768f4f803377015314dd3d97be4134be9cd3e3202e9d12b271\",\"urls\":[\"bzz-raw://b592704b421829cd5a16a7ca2ecb05cf79db260229940b2f56cba503ebd273f6\",\"dweb:/ipfs/QmeE1mekd9kWMF3eEGRgq7fjJDKqqLCYU7AZcrGzpGcrES\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "/**\n * Interface for Random Number Generator\n */\n\npragma solidity ^0.8.0;\n\ninterface IRNG {\n\n    /**\n     * @notice Commit a hidden entropy generated by a client.\n     *\n     * @param commitment Commitment for the client's entropy. For instrance, this can be hash of the entropy.\n    **/\n    function commit(bytes32 commitment) external;\n\n    /**\n     * @notice Lock client's entropy. Mix client's entropy with the entropy of a block that was mined before \n     * the method call, but after the block with the client's entropy commitment. \n     *\n     * Note, that no miner knows client's entropy when it is commited to the blockchain and cannot manipulate the\n     * hash of the block where client's entropy is mixed with the blockchain entropy, since client's entropy is actually revealed\n     * after the lock block is mined. On the other hand, the client cannot predict the blockchain entropy either, when the \n     * client's and blockchain's entropies get mixed.\n     *\n     * @param entropy Client's entropy\n    **/\n    function lock(bytes32 entropy) external;\n\n    /**\n     * @notice Read the (pseudo-)random number derived from the client's and blockchain entropies. The number is uniquely defined by\n     * the client's entropy commitment.\n     *\n     * @param commitment The commitment identifying the resulting randomly generated number\n    **/\n    function read(bytes32 commitment) external view returns (uint256);\n}\n",
  "sourcePath": "/home/vrogojin/Projects/FireZard/nft/contracts/IRNG.sol",
  "ast": {
    "absolutePath": "project:/contracts/IRNG.sol",
    "exportedSymbols": {
      "IRNG": [
        5495
      ]
    },
    "id": 5496,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5474,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "50:23:26"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IRNG",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 5495,
        "linearizedBaseContracts": [
          5495
        ],
        "name": "IRNG",
        "nameLocation": "85:4:26",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 5475,
              "nodeType": "StructuredDocumentation",
              "src": "97:190:26",
              "text": " @notice Commit a hidden entropy generated by a client.\n @param commitment Commitment for the client's entropy. For instrance, this can be hash of the entropy.*"
            },
            "functionSelector": "f14fcbc8",
            "id": 5480,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "commit",
            "nameLocation": "301:6:26",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5478,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5477,
                  "mutability": "mutable",
                  "name": "commitment",
                  "nameLocation": "316:10:26",
                  "nodeType": "VariableDeclaration",
                  "scope": 5480,
                  "src": "308:18:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5476,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "308:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "307:20:26"
            },
            "returnParameters": {
              "id": 5479,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "336:0:26"
            },
            "scope": 5495,
            "src": "292:45:26",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5481,
              "nodeType": "StructuredDocumentation",
              "src": "343:679:26",
              "text": " @notice Lock client's entropy. Mix client's entropy with the entropy of a block that was mined before \n the method call, but after the block with the client's entropy commitment. \n Note, that no miner knows client's entropy when it is commited to the blockchain and cannot manipulate the\n hash of the block where client's entropy is mixed with the blockchain entropy, since client's entropy is actually revealed\n after the lock block is mined. On the other hand, the client cannot predict the blockchain entropy either, when the \n client's and blockchain's entropies get mixed.\n @param entropy Client's entropy*"
            },
            "functionSelector": "01670ba9",
            "id": 5486,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "lock",
            "nameLocation": "1036:4:26",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5484,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5483,
                  "mutability": "mutable",
                  "name": "entropy",
                  "nameLocation": "1049:7:26",
                  "nodeType": "VariableDeclaration",
                  "scope": 5486,
                  "src": "1041:15:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5482,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1041:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1040:17:26"
            },
            "returnParameters": {
              "id": 5485,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1066:0:26"
            },
            "scope": 5495,
            "src": "1027:40:26",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5487,
              "nodeType": "StructuredDocumentation",
              "src": "1073:283:26",
              "text": " @notice Read the (pseudo-)random number derived from the client's and blockchain entropies. The number is uniquely defined by\n the client's entropy commitment.\n @param commitment The commitment identifying the resulting randomly generated number*"
            },
            "functionSelector": "61da1439",
            "id": 5494,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "read",
            "nameLocation": "1370:4:26",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5490,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5489,
                  "mutability": "mutable",
                  "name": "commitment",
                  "nameLocation": "1383:10:26",
                  "nodeType": "VariableDeclaration",
                  "scope": 5494,
                  "src": "1375:18:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5488,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1375:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1374:20:26"
            },
            "returnParameters": {
              "id": 5493,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5492,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5494,
                  "src": "1418:7:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5491,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1418:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1417:9:26"
            },
            "scope": 5495,
            "src": "1361:66:26",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 5496,
        "src": "75:1354:26",
        "usedErrors": []
      }
    ],
    "src": "50:1380:26"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/IRNG.sol",
    "exportedSymbols": {
      "IRNG": [
        5495
      ]
    },
    "id": 5496,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5474,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "50:23:26"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IRNG",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 5495,
        "linearizedBaseContracts": [
          5495
        ],
        "name": "IRNG",
        "nameLocation": "85:4:26",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 5475,
              "nodeType": "StructuredDocumentation",
              "src": "97:190:26",
              "text": " @notice Commit a hidden entropy generated by a client.\n @param commitment Commitment for the client's entropy. For instrance, this can be hash of the entropy.*"
            },
            "functionSelector": "f14fcbc8",
            "id": 5480,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "commit",
            "nameLocation": "301:6:26",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5478,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5477,
                  "mutability": "mutable",
                  "name": "commitment",
                  "nameLocation": "316:10:26",
                  "nodeType": "VariableDeclaration",
                  "scope": 5480,
                  "src": "308:18:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5476,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "308:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "307:20:26"
            },
            "returnParameters": {
              "id": 5479,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "336:0:26"
            },
            "scope": 5495,
            "src": "292:45:26",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5481,
              "nodeType": "StructuredDocumentation",
              "src": "343:679:26",
              "text": " @notice Lock client's entropy. Mix client's entropy with the entropy of a block that was mined before \n the method call, but after the block with the client's entropy commitment. \n Note, that no miner knows client's entropy when it is commited to the blockchain and cannot manipulate the\n hash of the block where client's entropy is mixed with the blockchain entropy, since client's entropy is actually revealed\n after the lock block is mined. On the other hand, the client cannot predict the blockchain entropy either, when the \n client's and blockchain's entropies get mixed.\n @param entropy Client's entropy*"
            },
            "functionSelector": "01670ba9",
            "id": 5486,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "lock",
            "nameLocation": "1036:4:26",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5484,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5483,
                  "mutability": "mutable",
                  "name": "entropy",
                  "nameLocation": "1049:7:26",
                  "nodeType": "VariableDeclaration",
                  "scope": 5486,
                  "src": "1041:15:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5482,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1041:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1040:17:26"
            },
            "returnParameters": {
              "id": 5485,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1066:0:26"
            },
            "scope": 5495,
            "src": "1027:40:26",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5487,
              "nodeType": "StructuredDocumentation",
              "src": "1073:283:26",
              "text": " @notice Read the (pseudo-)random number derived from the client's and blockchain entropies. The number is uniquely defined by\n the client's entropy commitment.\n @param commitment The commitment identifying the resulting randomly generated number*"
            },
            "functionSelector": "61da1439",
            "id": 5494,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "read",
            "nameLocation": "1370:4:26",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5490,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5489,
                  "mutability": "mutable",
                  "name": "commitment",
                  "nameLocation": "1383:10:26",
                  "nodeType": "VariableDeclaration",
                  "scope": 5494,
                  "src": "1375:18:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5488,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1375:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1374:20:26"
            },
            "returnParameters": {
              "id": 5493,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5492,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5494,
                  "src": "1418:7:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5491,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1418:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1417:9:26"
            },
            "scope": 5495,
            "src": "1361:66:26",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 5496,
        "src": "75:1354:26",
        "usedErrors": []
      }
    ],
    "src": "50:1380:26"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.11+commit.d7f03943.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2021-12-21T22:10:19.655Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "commit(bytes32)": {
        "params": {
          "commitment": "Commitment for the client's entropy. For instrance, this can be hash of the entropy.*"
        }
      },
      "lock(bytes32)": {
        "params": {
          "entropy": "Client's entropy*"
        }
      },
      "read(bytes32)": {
        "params": {
          "commitment": "The commitment identifying the resulting randomly generated number*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "commit(bytes32)": {
        "notice": "Commit a hidden entropy generated by a client."
      },
      "lock(bytes32)": {
        "notice": "Lock client's entropy. Mix client's entropy with the entropy of a block that was mined before  the method call, but after the block with the client's entropy commitment.  Note, that no miner knows client's entropy when it is commited to the blockchain and cannot manipulate the hash of the block where client's entropy is mixed with the blockchain entropy, since client's entropy is actually revealed after the lock block is mined. On the other hand, the client cannot predict the blockchain entropy either, when the  client's and blockchain's entropies get mixed."
      },
      "read(bytes32)": {
        "notice": "Read the (pseudo-)random number derived from the client's and blockchain entropies. The number is uniquely defined by the client's entropy commitment."
      }
    },
    "version": 1
  }
}