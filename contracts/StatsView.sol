
pragma solidity ^0.8;

contract abstract StatsView{

    address public	TAG_addr;
    address public	NFT_addr;
    address public	stats_lib_addr;

    constructor(address tag_storage, address nft_container, address stats_lib){
	TAG_addr = tag_storage;
	NFT_addr = nft_container;
	stats_lib_addr = stats_lib;
    }

    /**
     * @notice Sets link to Tag Storage smart contract
    **/
    function linkTAG(address tag_storage) public virtual onlyOwner {
        TAG_addr = tag_storage;
        emit TAGLink(tag_storage);
    }

    /**
     * @notice Sets link to ERC1155 NFT smart contract
    **/
    function linkNFT(address nft_container) public virtual onlyOwner {
        NFT_addr = nft_container;
        emit NFTLink(nft_container);
    }

    /**
     * @notice Sets link to the Stats deriving library
    **/
    function linkStatsLib(address stats_lib) public virtual onlyOwner {
        stats_lib_addr = stats_lib;
        Util.Stat[] memory _stats = IStatsDerive(stats_lib_addr).stats(Util.DRAGON_CARD_TYPE_CODE);
        saveStats(_stats);
        emit StatsLibLink(stats_lib);
    }

    /**
     * @notice Defines a set of stats that can be derived
     *
     * @return An enumerable set (actually, an array) of stats that can be derived by the interface implementation
    **/
    function stats(bytes32 nft_type) external pure returns (Util.Stat[] memory) {
	if(nft_type == Util.DRAGON_CARD_TYPE_CODE)
	    return DragonStats(stats_lib_addr).stats(nft_type);
	revert('Unknown NFT type');
    }

     /**
     * @notice Read an integer stat
     *
     * @param id An id generated by an RNG
     * @param name The stats' name
     * @return The stats' value
    **/
    function getStatInt(bytes32 nft_type, uint256 id, string calldata name) external view returns (uint256){
	bytes32 h_name = keccak256(abi.encodePacked(name));

	Util.Stat[] memory _stats = stats(nft_type);
	for(uint i=0; i<_stats.length; i++){
	    bytes32 h_stats_name = keccak256(abi.encodePacked(_stats[i].name));
	    if(h_name != h_stats_name)continue;
	    ...
	}
    }


}